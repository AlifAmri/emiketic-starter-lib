{"version":3,"sources":["../../src/redux/state.helper.js"],"names":["createAction","createFetchActions","createRequestAction","createSuccessAction","createFailureAction","createIndexMetaActions","createIndexSuccessAction","createItemSuccessAction","module","actionTypePrefix","ACTION","perform","payload","type","prefix","REQUEST","SUCCESS","FAILURE","request","parameters","success","dispatch","failure","error","actionType","INDEX_PAGE_SIZE_DEFAULT","substate","defaults","$reset","meta","filter","sort","page","pageSize","$filter","$sort","$pageSize","$page","getState","pageTotal","data","item"],"mappings":"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","file":"state.helper.js","sourcesContent":["/**\n * Action creator factory for typical action\n */\n\nexport function createAction(module, actionTypePrefix) {\n  const ACTION = `${module}_${actionTypePrefix}`;\n\n  return {\n    ACTION,\n\n    perform(payload = {}) {\n      return {\n        type: ACTION,\n        ...payload,\n      };\n    },\n  };\n}\n\n/**\n * Action creators factory for typical fetch operation\n */\n\nexport function createFetchActions(module, actionTypePrefix) {\n  const prefix = `${module}_${actionTypePrefix}`;\n\n  const REQUEST = `${prefix}_REQUEST`;\n  const SUCCESS = `${prefix}_SUCCESS`;\n  const FAILURE = `${prefix}_FAILURE`;\n\n  return {\n    REQUEST,\n\n    request(parameters = {}) {\n      return {\n        type: REQUEST,\n        ...parameters,\n      };\n    },\n\n    SUCCESS,\n\n    success(payload = {}) {\n      return (dispatch) => {\n        dispatch({\n          type: SUCCESS,\n          ...payload,\n        });\n\n        return payload;\n      };\n    },\n\n    FAILURE,\n\n    failure(error) {\n      return (dispatch) => {\n        dispatch({\n          type: FAILURE,\n        });\n\n        throw error;\n      };\n    },\n  };\n}\n\nexport function createRequestAction(actionType) {\n  return function request(payload = {}) {\n    return {\n      type: actionType,\n      ...payload,\n    };\n  };\n}\n\nexport function createSuccessAction(actionType) {\n  return function success(payload = {}) {\n    return (dispatch) => {\n      dispatch({\n        type: actionType,\n        ...payload,\n      });\n\n      return payload;\n    };\n  };\n}\n\nexport function createFailureAction(actionType) {\n  return function failure(error) {\n    return (dispatch) => {\n      dispatch({\n        type: actionType,\n      });\n\n      throw error;\n    };\n  };\n}\n\n/**\n * Action creators makers for typical index view\n */\n\nconst INDEX_PAGE_SIZE_DEFAULT = 50;\n\nexport function createIndexMetaActions(substate, actionType, defaults = {}) {\n  function $reset() {\n    return {\n      type: actionType,\n      meta: {\n        filter: defaults.filter || '',\n        sort: defaults.sort || '',\n        page: 1,\n        pageSize: defaults.pageSize || INDEX_PAGE_SIZE_DEFAULT,\n      },\n    };\n  }\n\n  function $filter(filter = '') {\n    return {\n      type: actionType,\n      meta: {\n        filter,\n        page: 1,\n      },\n    };\n  }\n\n  function $sort(sort = '') {\n    return {\n      type: actionType,\n      meta: {\n        sort,\n        page: 1,\n      },\n    };\n  }\n\n  function $pageSize(pageSize = INDEX_PAGE_SIZE_DEFAULT) {\n    if (pageSize < 1) {\n      pageSize = 10;\n    }\n\n    if (pageSize > 100) {\n      pageSize = 100;\n    }\n\n    return {\n      type: actionType,\n      meta: {\n        pageSize,\n        page: 1,\n      },\n    };\n  }\n\n  function $page(page = 1) {\n    return (dispatch, getState) => {\n      const { meta } = getState()[substate];\n\n      if (page < 1) {\n        page = 1;\n      }\n\n      if (page > meta.pageTotal) {\n        page = meta.pageTotal - 1;\n      }\n\n      dispatch({\n        type: actionType,\n        meta: {\n          page,\n        },\n      });\n    };\n  }\n\n  return {\n    $reset,\n    $filter,\n    $sort,\n    $pageSize,\n    $page,\n  };\n}\n\nexport function createIndexSuccessAction(actionType) {\n  return function success({ data, meta }) {\n    return (dispatch) => {\n      dispatch({\n        type: actionType,\n        data,\n        meta,\n      });\n\n      return { data, meta };\n    };\n  };\n}\n\nexport function createItemSuccessAction(actionType) {\n  return function success({ item }) {\n    return (dispatch) => {\n      dispatch({\n        type: actionType,\n        item,\n      });\n\n      return { item };\n    };\n  };\n}\n"]}