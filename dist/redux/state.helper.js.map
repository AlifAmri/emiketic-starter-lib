{"version":3,"sources":["../../src/redux/state.helper.js"],"names":["createSetOperationActions","createAsyncOperationActions","createRequestAction","createSuccessAction","createFailureAction","createIndexMetaActions","createIndexSuccessAction","createItemSuccessAction","module","actionTypePrefix","prefix","SET","set","payload","type","REQUEST","SUCCESS","FAILURE","request","success","dispatch","failure","error","actionType","INDEX_PAGE_SIZE_DEFAULT","substate","defaults","$reset","meta","filter","sort","page","pageSize","$filter","$sort","$pageSize","$page","getState","pageTotal","data","item"],"mappings":"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","file":"state.helper.js","sourcesContent":["/**\n * Action creator factory for typical set operation\n */\n\nexport function createSetOperationActions(module, actionTypePrefix) {\n  const prefix = `${module}_${actionTypePrefix}`;\n\n  const SET = `${prefix}`;\n\n  return {\n    SET,\n\n    set(payload = {}) {\n      return {\n        type: SET,\n        ...payload,\n      };\n    },\n  };\n}\n\n/**\n * Action creators factory for typical async operation\n */\n\nexport function createAsyncOperationActions(module, actionTypePrefix) {\n  const prefix = `${module}_${actionTypePrefix}`;\n\n  const REQUEST = `${prefix}_REQUEST`;\n  const SUCCESS = `${prefix}_SUCCESS`;\n  const FAILURE = `${prefix}_FAILURE`;\n\n  return {\n    REQUEST,\n\n    request(payload = {}) {\n      return {\n        type: REQUEST,\n        ...payload,\n      };\n    },\n\n    SUCCESS,\n\n    success(payload = {}) {\n      return (dispatch) => {\n        dispatch({\n          type: SUCCESS,\n          ...payload,\n        });\n\n        return payload;\n      };\n    },\n\n    FAILURE,\n\n    failure(error) {\n      return (dispatch) => {\n        dispatch({\n          type: FAILURE,\n        });\n\n        throw error;\n      };\n    },\n  };\n}\n\nexport function createRequestAction(actionType) {\n  return function request(payload = {}) {\n    return {\n      type: actionType,\n      ...payload,\n    };\n  };\n}\n\nexport function createSuccessAction(actionType) {\n  return function success(payload = {}) {\n    return (dispatch) => {\n      dispatch({\n        type: actionType,\n        ...payload,\n      });\n\n      return payload;\n    };\n  };\n}\n\nexport function createFailureAction(actionType) {\n  return function failure(error) {\n    return (dispatch) => {\n      dispatch({\n        type: actionType,\n      });\n\n      throw error;\n    };\n  };\n}\n\n/**\n * Action creators makers for typical index view\n */\n\nconst INDEX_PAGE_SIZE_DEFAULT = 50;\n\nexport function createIndexMetaActions(substate, actionType, defaults = {}) {\n  function $reset() {\n    return {\n      type: actionType,\n      meta: {\n        filter: defaults.filter || '',\n        sort: defaults.sort || '',\n        page: 1,\n        pageSize: defaults.pageSize || INDEX_PAGE_SIZE_DEFAULT,\n      },\n    };\n  }\n\n  function $filter(filter = '') {\n    return {\n      type: actionType,\n      meta: {\n        filter,\n        page: 1,\n      },\n    };\n  }\n\n  function $sort(sort = '') {\n    return {\n      type: actionType,\n      meta: {\n        sort,\n        page: 1,\n      },\n    };\n  }\n\n  function $pageSize(pageSize = INDEX_PAGE_SIZE_DEFAULT) {\n    if (pageSize < 1) {\n      pageSize = 10;\n    }\n\n    if (pageSize > 100) {\n      pageSize = 100;\n    }\n\n    return {\n      type: actionType,\n      meta: {\n        pageSize,\n        page: 1,\n      },\n    };\n  }\n\n  function $page(page = 1) {\n    return (dispatch, getState) => {\n      const { meta } = getState()[substate];\n\n      if (page < 1) {\n        page = 1;\n      }\n\n      if (page > meta.pageTotal) {\n        page = meta.pageTotal - 1;\n      }\n\n      dispatch({\n        type: actionType,\n        meta: {\n          page,\n        },\n      });\n    };\n  }\n\n  return {\n    $reset,\n    $filter,\n    $sort,\n    $pageSize,\n    $page,\n  };\n}\n\nexport function createIndexSuccessAction(actionType) {\n  return function success({ data, meta }) {\n    return (dispatch) => {\n      dispatch({\n        type: actionType,\n        data,\n        meta,\n      });\n\n      return { data, meta };\n    };\n  };\n}\n\nexport function createItemSuccessAction(actionType) {\n  return function success({ item }) {\n    return (dispatch) => {\n      dispatch({\n        type: actionType,\n        item,\n      });\n\n      return { item };\n    };\n  };\n}\n"]}