{"version":3,"sources":["../../src/common/intl.test.js"],"names":["$intl","require","$locale","defineLocale","timeZone","currency","test","input","output","number","expect","replace","toEqual","Date","UTC","date","toBe","time"],"mappings":";;AAAA;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,QAAD,CAArB;;AAEA,IAAMC,OAAO,GAAGF,KAAK,CAACG,YAAN,CAAmB,IAAnB,EAAyB;AACvCC,EAAAA,QAAQ,EAAE,cAD6B;AAEvCC,EAAAA,QAAQ,EAAE;AAF6B,CAAzB,CAAhB;AAKAC,IAAI,CAAC,gBAAD,EAAmB,YAAM;AAC3B,MAAMC,KAAK,GAAG,UAAd;AACA,MAAMC,MAAM,GAAGN,OAAO,CAACO,MAAR,CAAeF,KAAf,CAAf;AACAG,EAAAA,MAAM,CAACF,MAAM,CAACG,OAAP,CAAe,MAAf,EAAuB,GAAvB,CAAD,CAAN,CAAoCC,OAApC,CAA4C,aAA5C;AACD,CAJG,CAAJ;AAMAN,IAAI,CAAC,kBAAD,EAAqB,YAAM;AAC7B,MAAMC,KAAK,GAAG,UAAd;AACA,MAAMC,MAAM,GAAGN,OAAO,CAACG,QAAR,CAAiBE,KAAjB,CAAf;AACAG,EAAAA,MAAM,CAACF,MAAM,CAACG,OAAP,CAAe,MAAf,EAAuB,GAAvB,CAAD,CAAN,CAAoCC,OAApC,CAA4C,cAA5C;AACD,CAJG,CAAJ;AAMAN,IAAI,CAAC,cAAD,EAAiB,YAAM;AACzB,MAAMC,KAAK,GAAG,IAAIM,IAAJ,CAASA,IAAI,CAACC,GAAL,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,CAAT,CAAd;AACA,MAAMN,MAAM,GAAGN,OAAO,CAACa,IAAR,CAAaR,KAAb,CAAf;AACAG,EAAAA,MAAM,CAACF,MAAD,CAAN,CAAeQ,IAAf,CAAoB,YAApB;AACD,CAJG,CAAJ;AAMAV,IAAI,CAAC,cAAD,EAAiB,YAAM;AACzB,MAAMC,KAAK,GAAG,IAAIM,IAAJ,CAASA,IAAI,CAACC,GAAL,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,CAAT,CAAd;AACA,MAAMN,MAAM,GAAGN,OAAO,CAACe,IAAR,CAAaV,KAAb,CAAf;AACAG,EAAAA,MAAM,CAACF,MAAD,CAAN,CAAeQ,IAAf,CAAoB,OAApB;AACD,CAJG,CAAJ","sourcesContent":["/* eslint-env jest */\n\nconst $intl = require('./intl');\n\nconst $locale = $intl.defineLocale('fr', {\n  timeZone: 'Europe/Paris',\n  currency: 'EUR',\n});\n\ntest('$locale.number', () => {\n  const input = 123456.789;\n  const output = $locale.number(input);\n  expect(output.replace(/\\s/gi, ' ')).toEqual('123 456,789');\n});\n\ntest('$locale.currency', () => {\n  const input = 123456.789;\n  const output = $locale.currency(input);\n  expect(output.replace(/\\s/gi, ' ')).toEqual('123 456,79 â‚¬');\n});\n\ntest('$locale.date', () => {\n  const input = new Date(Date.UTC(2000, 1, 1, 1, 1, 1));\n  const output = $locale.date(input);\n  expect(output).toBe('01/02/2000');\n});\n\ntest('$locale.time', () => {\n  const input = new Date(Date.UTC(2000, 1, 1, 1, 1, 1));\n  const output = $locale.time(input);\n  expect(output).toBe('02:01');\n});\n"],"file":"intl.test.js"}